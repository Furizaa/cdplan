"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.handler = void 0;
const aws_sdk_1 = require("aws-sdk");
const node_fetch_1 = require("node-fetch");
exports.handler = async (event) => {
    var _a, _b;
    console.log('Item Proxy Request', event);
    const dynamo = new aws_sdk_1.DynamoDB.DocumentClient();
    const lambda = new aws_sdk_1.Lambda();
    const { region, itemId } = event;
    const tokenResponse = await lambda
        .invoke({
        FunctionName: (_a = process.env.TOKEN_FUNCTION_NAME) !== null && _a !== void 0 ? _a : '',
        Payload: JSON.stringify({ ...event }),
    })
        .promise();
    const bearer = JSON.parse(tokenResponse.Payload);
    const mediaPromise = node_fetch_1.default(`https://${region}.api.blizzard.com/data/wow/media/item/${itemId}`, {
        headers: { authorization: `Bearer ${bearer}`, 'battlenet-namespace': `static-${region}` },
    });
    const itemPromise = node_fetch_1.default(`https://${region}.api.blizzard.com/data/wow/item/${itemId}`, {
        headers: { authorization: `Bearer ${bearer}`, 'battlenet-namespace': `static-${region}` },
    });
    const [mediaResponse, itemResponse] = await Promise.all([mediaPromise, itemPromise]);
    if (mediaResponse.status !== 200) {
        return {
            data: null,
            error: { code: mediaResponse.status, text: await mediaResponse.text() },
        };
    }
    if (itemResponse.status !== 200) {
        return {
            data: null,
            error: { code: itemResponse.status, text: await itemResponse.text() },
        };
    }
    const mediaJson = await mediaResponse.json();
    const itemJson = await itemResponse.json();
    await dynamo
        .update({
        TableName: (_b = process.env.CACHE_TABLE_NAME) !== null && _b !== void 0 ? _b : '',
        Key: { id: `${itemId}` },
        UpdateExpression: `set media = :media, cache = :cache`,
        ExpressionAttributeValues: {
            ':media': JSON.stringify(mediaJson),
            ':cache': JSON.stringify(itemJson),
        },
    })
        .promise();
    return {
        data: { media: mediaJson, item: itemJson },
        error: null,
    };
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaXRlbS1wcm94eS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIml0ZW0tcHJveHkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEscUNBQTJDO0FBQzNDLDJDQUErQjtBQUdsQixRQUFBLE9BQU8sR0FBRyxLQUFLLEVBQUUsS0FBbUMsRUFBZ0IsRUFBRTs7SUFDakYsT0FBTyxDQUFDLEdBQUcsQ0FBQyxvQkFBb0IsRUFBRSxLQUFLLENBQUMsQ0FBQztJQUV6QyxNQUFNLE1BQU0sR0FBRyxJQUFJLGtCQUFRLENBQUMsY0FBYyxFQUFFLENBQUM7SUFDN0MsTUFBTSxNQUFNLEdBQUcsSUFBSSxnQkFBTSxFQUFFLENBQUM7SUFDNUIsTUFBTSxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsR0FBRyxLQUFLLENBQUM7SUFFakMsTUFBTSxhQUFhLEdBQUcsTUFBTSxNQUFNO1NBQy9CLE1BQU0sQ0FBQztRQUNOLFlBQVksUUFBRSxPQUFPLENBQUMsR0FBRyxDQUFDLG1CQUFtQixtQ0FBSSxFQUFFO1FBQ25ELE9BQU8sRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLEVBQUUsR0FBRyxLQUFLLEVBQUUsQ0FBQztLQUN0QyxDQUFDO1NBQ0QsT0FBTyxFQUFFLENBQUM7SUFFYixNQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLGFBQWEsQ0FBQyxPQUFpQixDQUFDLENBQUM7SUFFM0QsTUFBTSxZQUFZLEdBQUcsb0JBQUssQ0FBQyxXQUFXLE1BQU0seUNBQXlDLE1BQU0sRUFBRSxFQUFFO1FBQzdGLE9BQU8sRUFBRSxFQUFFLGFBQWEsRUFBRSxVQUFVLE1BQU0sRUFBRSxFQUFFLHFCQUFxQixFQUFFLFVBQVUsTUFBTSxFQUFFLEVBQUU7S0FDMUYsQ0FBQyxDQUFDO0lBRUgsTUFBTSxXQUFXLEdBQUcsb0JBQUssQ0FBQyxXQUFXLE1BQU0sbUNBQW1DLE1BQU0sRUFBRSxFQUFFO1FBQ3RGLE9BQU8sRUFBRSxFQUFFLGFBQWEsRUFBRSxVQUFVLE1BQU0sRUFBRSxFQUFFLHFCQUFxQixFQUFFLFVBQVUsTUFBTSxFQUFFLEVBQUU7S0FDMUYsQ0FBQyxDQUFDO0lBRUgsTUFBTSxDQUFDLGFBQWEsRUFBRSxZQUFZLENBQUMsR0FBRyxNQUFNLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxZQUFZLEVBQUUsV0FBVyxDQUFDLENBQUMsQ0FBQztJQUVyRixJQUFJLGFBQWEsQ0FBQyxNQUFNLEtBQUssR0FBRyxFQUFFO1FBQ2hDLE9BQU87WUFDTCxJQUFJLEVBQUUsSUFBSTtZQUNWLEtBQUssRUFBRSxFQUFFLElBQUksRUFBRSxhQUFhLENBQUMsTUFBTSxFQUFFLElBQUksRUFBRSxNQUFNLGFBQWEsQ0FBQyxJQUFJLEVBQUUsRUFBRTtTQUN4RSxDQUFDO0tBQ0g7SUFFRCxJQUFJLFlBQVksQ0FBQyxNQUFNLEtBQUssR0FBRyxFQUFFO1FBQy9CLE9BQU87WUFDTCxJQUFJLEVBQUUsSUFBSTtZQUNWLEtBQUssRUFBRSxFQUFFLElBQUksRUFBRSxZQUFZLENBQUMsTUFBTSxFQUFFLElBQUksRUFBRSxNQUFNLFlBQVksQ0FBQyxJQUFJLEVBQUUsRUFBRTtTQUN0RSxDQUFDO0tBQ0g7SUFFRCxNQUFNLFNBQVMsR0FBRyxNQUFNLGFBQWEsQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUM3QyxNQUFNLFFBQVEsR0FBRyxNQUFNLFlBQVksQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUUzQyxNQUFNLE1BQU07U0FDVCxNQUFNLENBQUM7UUFDTixTQUFTLFFBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxnQkFBZ0IsbUNBQUksRUFBRTtRQUM3QyxHQUFHLEVBQUUsRUFBRSxFQUFFLEVBQUUsR0FBRyxNQUFNLEVBQUUsRUFBRTtRQUN4QixnQkFBZ0IsRUFBRSxvQ0FBb0M7UUFDdEQseUJBQXlCLEVBQUU7WUFDekIsUUFBUSxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDO1lBQ25DLFFBQVEsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQztTQUNuQztLQUNGLENBQUM7U0FDRCxPQUFPLEVBQUUsQ0FBQztJQUViLE9BQU87UUFDTCxJQUFJLEVBQUUsRUFBRSxLQUFLLEVBQUUsU0FBUyxFQUFFLElBQUksRUFBRSxRQUFRLEVBQUU7UUFDMUMsS0FBSyxFQUFFLElBQUk7S0FDWixDQUFDO0FBQ0osQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRHluYW1vREIsIExhbWJkYSB9IGZyb20gJ2F3cy1zZGsnO1xuaW1wb3J0IGZldGNoIGZyb20gJ25vZGUtZmV0Y2gnO1xuaW1wb3J0IHsgUXVldWVQYXlsb2FkSW5JdGVtIH0gZnJvbSAnLi90eXBlcyc7XG5cbmV4cG9ydCBjb25zdCBoYW5kbGVyID0gYXN5bmMgKGV2ZW50OiBRdWV1ZVBheWxvYWRJbkl0ZW1bJ3BhcmFtcyddKTogUHJvbWlzZTxhbnk+ID0+IHtcbiAgY29uc29sZS5sb2coJ0l0ZW0gUHJveHkgUmVxdWVzdCcsIGV2ZW50KTtcblxuICBjb25zdCBkeW5hbW8gPSBuZXcgRHluYW1vREIuRG9jdW1lbnRDbGllbnQoKTtcbiAgY29uc3QgbGFtYmRhID0gbmV3IExhbWJkYSgpO1xuICBjb25zdCB7IHJlZ2lvbiwgaXRlbUlkIH0gPSBldmVudDtcblxuICBjb25zdCB0b2tlblJlc3BvbnNlID0gYXdhaXQgbGFtYmRhXG4gICAgLmludm9rZSh7XG4gICAgICBGdW5jdGlvbk5hbWU6IHByb2Nlc3MuZW52LlRPS0VOX0ZVTkNUSU9OX05BTUUgPz8gJycsXG4gICAgICBQYXlsb2FkOiBKU09OLnN0cmluZ2lmeSh7IC4uLmV2ZW50IH0pLFxuICAgIH0pXG4gICAgLnByb21pc2UoKTtcblxuICBjb25zdCBiZWFyZXIgPSBKU09OLnBhcnNlKHRva2VuUmVzcG9uc2UuUGF5bG9hZCBhcyBzdHJpbmcpO1xuXG4gIGNvbnN0IG1lZGlhUHJvbWlzZSA9IGZldGNoKGBodHRwczovLyR7cmVnaW9ufS5hcGkuYmxpenphcmQuY29tL2RhdGEvd293L21lZGlhL2l0ZW0vJHtpdGVtSWR9YCwge1xuICAgIGhlYWRlcnM6IHsgYXV0aG9yaXphdGlvbjogYEJlYXJlciAke2JlYXJlcn1gLCAnYmF0dGxlbmV0LW5hbWVzcGFjZSc6IGBzdGF0aWMtJHtyZWdpb259YCB9LFxuICB9KTtcblxuICBjb25zdCBpdGVtUHJvbWlzZSA9IGZldGNoKGBodHRwczovLyR7cmVnaW9ufS5hcGkuYmxpenphcmQuY29tL2RhdGEvd293L2l0ZW0vJHtpdGVtSWR9YCwge1xuICAgIGhlYWRlcnM6IHsgYXV0aG9yaXphdGlvbjogYEJlYXJlciAke2JlYXJlcn1gLCAnYmF0dGxlbmV0LW5hbWVzcGFjZSc6IGBzdGF0aWMtJHtyZWdpb259YCB9LFxuICB9KTtcblxuICBjb25zdCBbbWVkaWFSZXNwb25zZSwgaXRlbVJlc3BvbnNlXSA9IGF3YWl0IFByb21pc2UuYWxsKFttZWRpYVByb21pc2UsIGl0ZW1Qcm9taXNlXSk7XG5cbiAgaWYgKG1lZGlhUmVzcG9uc2Uuc3RhdHVzICE9PSAyMDApIHtcbiAgICByZXR1cm4ge1xuICAgICAgZGF0YTogbnVsbCxcbiAgICAgIGVycm9yOiB7IGNvZGU6IG1lZGlhUmVzcG9uc2Uuc3RhdHVzLCB0ZXh0OiBhd2FpdCBtZWRpYVJlc3BvbnNlLnRleHQoKSB9LFxuICAgIH07XG4gIH1cblxuICBpZiAoaXRlbVJlc3BvbnNlLnN0YXR1cyAhPT0gMjAwKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGRhdGE6IG51bGwsXG4gICAgICBlcnJvcjogeyBjb2RlOiBpdGVtUmVzcG9uc2Uuc3RhdHVzLCB0ZXh0OiBhd2FpdCBpdGVtUmVzcG9uc2UudGV4dCgpIH0sXG4gICAgfTtcbiAgfVxuXG4gIGNvbnN0IG1lZGlhSnNvbiA9IGF3YWl0IG1lZGlhUmVzcG9uc2UuanNvbigpO1xuICBjb25zdCBpdGVtSnNvbiA9IGF3YWl0IGl0ZW1SZXNwb25zZS5qc29uKCk7XG5cbiAgYXdhaXQgZHluYW1vXG4gICAgLnVwZGF0ZSh7XG4gICAgICBUYWJsZU5hbWU6IHByb2Nlc3MuZW52LkNBQ0hFX1RBQkxFX05BTUUgPz8gJycsXG4gICAgICBLZXk6IHsgaWQ6IGAke2l0ZW1JZH1gIH0sXG4gICAgICBVcGRhdGVFeHByZXNzaW9uOiBgc2V0IG1lZGlhID0gOm1lZGlhLCBjYWNoZSA9IDpjYWNoZWAsXG4gICAgICBFeHByZXNzaW9uQXR0cmlidXRlVmFsdWVzOiB7XG4gICAgICAgICc6bWVkaWEnOiBKU09OLnN0cmluZ2lmeShtZWRpYUpzb24pLFxuICAgICAgICAnOmNhY2hlJzogSlNPTi5zdHJpbmdpZnkoaXRlbUpzb24pLFxuICAgICAgfSxcbiAgICB9KVxuICAgIC5wcm9taXNlKCk7XG5cbiAgcmV0dXJuIHtcbiAgICBkYXRhOiB7IG1lZGlhOiBtZWRpYUpzb24sIGl0ZW06IGl0ZW1Kc29uIH0sXG4gICAgZXJyb3I6IG51bGwsXG4gIH07XG59O1xuIl19