"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.handler = void 0;
const aws_sdk_1 = require("aws-sdk");
const ulid_1 = require("ulid");
exports.handler = async (event = {}) => {
    var _a, _b, _c, _d, _e;
    console.log('QueueInset Request', event);
    const body = JSON.parse(event.body);
    const dynamo = new aws_sdk_1.DynamoDB.DocumentClient();
    const sf = new aws_sdk_1.StepFunctions();
    if (body.type === 'item') {
        const item = await dynamo
            .get({
            TableName: (_a = process.env.ITEM_CACHE_TABLE_NAME) !== null && _a !== void 0 ? _a : '',
            Key: { id: `${body.params.itemId}` },
        })
            .promise();
        if (item.Item) {
            return {
                statusCode: 200,
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    cache: {
                        data: { media: JSON.parse(item.Item.media), item: JSON.parse(item.Item.cache) },
                        error: null,
                    },
                }),
            };
        }
    }
    if (body.type === 'spell') {
        const spell = await dynamo
            .get({
            TableName: (_b = process.env.SPELL_CACHE_TABLE_NAME) !== null && _b !== void 0 ? _b : '',
            Key: { id: `${body.params.spellId}` },
        })
            .promise();
        if (spell.Item) {
            return {
                statusCode: 200,
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    cache: {
                        data: { media: JSON.parse(spell.Item.media), spell: JSON.parse(spell.Item.cache) },
                        error: null,
                    },
                }),
            };
        }
    }
    const token = ulid_1.ulid();
    const scanResult = await dynamo
        .scan({
        TableName: (_c = process.env.QUEUE_TABLE_NAME) !== null && _c !== void 0 ? _c : '',
        Select: 'COUNT',
    })
        .promise();
    const queueCount = (_d = scanResult.Count) !== null && _d !== void 0 ? _d : 0;
    const waitTime = Math.floor(queueCount / 15) + 1;
    await dynamo
        .update({
        TableName: (_e = process.env.QUEUE_TABLE_NAME) !== null && _e !== void 0 ? _e : '',
        Key: { token },
        UpdateExpression: `set payloadIn = :payload, createdAt = :createdAt`,
        ExpressionAttributeValues: {
            ':payload': event.body,
            ':createdAt': Date.now(),
        },
    })
        .promise();
    await sf
        .startExecution({
        stateMachineArn: process.env.QUEUE_STATE_MACHINE || '',
        input: JSON.stringify({ token, wait_time: waitTime }),
    })
        .promise();
    const response = {
        token,
        waitTimeSeconds: waitTime,
    };
    return {
        statusCode: 200,
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(response),
    };
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicXVldWUtaW5zZXJ0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsicXVldWUtaW5zZXJ0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLHFDQUFrRDtBQUNsRCwrQkFBNEI7QUFHZixRQUFBLE9BQU8sR0FBRyxLQUFLLEVBQUUsUUFBYSxFQUFFLEVBQWdCLEVBQUU7O0lBQzdELE9BQU8sQ0FBQyxHQUFHLENBQUMsb0JBQW9CLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDekMsTUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7SUFFcEMsTUFBTSxNQUFNLEdBQUcsSUFBSSxrQkFBUSxDQUFDLGNBQWMsRUFBRSxDQUFDO0lBQzdDLE1BQU0sRUFBRSxHQUFHLElBQUksdUJBQWEsRUFBRSxDQUFDO0lBRS9CLElBQUksSUFBSSxDQUFDLElBQUksS0FBSyxNQUFNLEVBQUU7UUFDeEIsTUFBTSxJQUFJLEdBQUcsTUFBTSxNQUFNO2FBQ3RCLEdBQUcsQ0FBQztZQUNILFNBQVMsUUFBRSxPQUFPLENBQUMsR0FBRyxDQUFDLHFCQUFxQixtQ0FBSSxFQUFFO1lBQ2xELEdBQUcsRUFBRSxFQUFFLEVBQUUsRUFBRSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFLEVBQUU7U0FDckMsQ0FBQzthQUNELE9BQU8sRUFBRSxDQUFDO1FBRWIsSUFBSSxJQUFJLENBQUMsSUFBSSxFQUFFO1lBQ2IsT0FBTztnQkFDTCxVQUFVLEVBQUUsR0FBRztnQkFDZixPQUFPLEVBQUUsRUFBRSxjQUFjLEVBQUUsa0JBQWtCLEVBQUU7Z0JBQy9DLElBQUksRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDO29CQUNuQixLQUFLLEVBQUU7d0JBQ0wsSUFBSSxFQUFFLEVBQUUsS0FBSyxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFO3dCQUMvRSxLQUFLLEVBQUUsSUFBSTtxQkFDWjtpQkFDRixDQUFDO2FBQ0gsQ0FBQztTQUNIO0tBQ0Y7SUFFRCxJQUFJLElBQUksQ0FBQyxJQUFJLEtBQUssT0FBTyxFQUFFO1FBQ3pCLE1BQU0sS0FBSyxHQUFHLE1BQU0sTUFBTTthQUN2QixHQUFHLENBQUM7WUFDSCxTQUFTLFFBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxzQkFBc0IsbUNBQUksRUFBRTtZQUNuRCxHQUFHLEVBQUUsRUFBRSxFQUFFLEVBQUUsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sRUFBRSxFQUFFO1NBQ3RDLENBQUM7YUFDRCxPQUFPLEVBQUUsQ0FBQztRQUViLElBQUksS0FBSyxDQUFDLElBQUksRUFBRTtZQUNkLE9BQU87Z0JBQ0wsVUFBVSxFQUFFLEdBQUc7Z0JBQ2YsT0FBTyxFQUFFLEVBQUUsY0FBYyxFQUFFLGtCQUFrQixFQUFFO2dCQUMvQyxJQUFJLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQztvQkFDbkIsS0FBSyxFQUFFO3dCQUNMLElBQUksRUFBRSxFQUFFLEtBQUssRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUUsS0FBSyxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRTt3QkFDbEYsS0FBSyxFQUFFLElBQUk7cUJBQ1o7aUJBQ0YsQ0FBQzthQUNILENBQUM7U0FDSDtLQUNGO0lBRUQsTUFBTSxLQUFLLEdBQUcsV0FBSSxFQUFFLENBQUM7SUFFckIsTUFBTSxVQUFVLEdBQUcsTUFBTSxNQUFNO1NBQzVCLElBQUksQ0FBQztRQUNKLFNBQVMsUUFBRSxPQUFPLENBQUMsR0FBRyxDQUFDLGdCQUFnQixtQ0FBSSxFQUFFO1FBQzdDLE1BQU0sRUFBRSxPQUFPO0tBQ2hCLENBQUM7U0FDRCxPQUFPLEVBQUUsQ0FBQztJQUViLE1BQU0sVUFBVSxTQUFHLFVBQVUsQ0FBQyxLQUFLLG1DQUFJLENBQUMsQ0FBQztJQUN6QyxNQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLFVBQVUsR0FBRyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUM7SUFFakQsTUFBTSxNQUFNO1NBQ1QsTUFBTSxDQUFDO1FBQ04sU0FBUyxRQUFFLE9BQU8sQ0FBQyxHQUFHLENBQUMsZ0JBQWdCLG1DQUFJLEVBQUU7UUFDN0MsR0FBRyxFQUFFLEVBQUUsS0FBSyxFQUFFO1FBQ2QsZ0JBQWdCLEVBQUUsa0RBQWtEO1FBQ3BFLHlCQUF5QixFQUFFO1lBQ3pCLFVBQVUsRUFBRSxLQUFLLENBQUMsSUFBSTtZQUN0QixZQUFZLEVBQUUsSUFBSSxDQUFDLEdBQUcsRUFBRTtTQUN6QjtLQUNGLENBQUM7U0FDRCxPQUFPLEVBQUUsQ0FBQztJQUViLE1BQU0sRUFBRTtTQUNMLGNBQWMsQ0FBQztRQUNkLGVBQWUsRUFBRSxPQUFPLENBQUMsR0FBRyxDQUFDLG1CQUFtQixJQUFJLEVBQUU7UUFDdEQsS0FBSyxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsRUFBRSxLQUFLLEVBQUUsU0FBUyxFQUFFLFFBQVEsRUFBRSxDQUFDO0tBQ3RELENBQUM7U0FDRCxPQUFPLEVBQUUsQ0FBQztJQUViLE1BQU0sUUFBUSxHQUF3QjtRQUNwQyxLQUFLO1FBQ0wsZUFBZSxFQUFFLFFBQVE7S0FDMUIsQ0FBQztJQUVGLE9BQU87UUFDTCxVQUFVLEVBQUUsR0FBRztRQUNmLE9BQU8sRUFBRSxFQUFFLGNBQWMsRUFBRSxrQkFBa0IsRUFBRTtRQUMvQyxJQUFJLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUM7S0FDL0IsQ0FBQztBQUNKLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFN0ZXBGdW5jdGlvbnMsIER5bmFtb0RCIH0gZnJvbSAnYXdzLXNkayc7XG5pbXBvcnQgeyB1bGlkIH0gZnJvbSAndWxpZCc7XG5pbXBvcnQgeyBRdWV1ZUluc2VydFJlc3BvbnNlIH0gZnJvbSAnLi90eXBlcyc7XG5cbmV4cG9ydCBjb25zdCBoYW5kbGVyID0gYXN5bmMgKGV2ZW50OiBhbnkgPSB7fSk6IFByb21pc2U8YW55PiA9PiB7XG4gIGNvbnNvbGUubG9nKCdRdWV1ZUluc2V0IFJlcXVlc3QnLCBldmVudCk7XG4gIGNvbnN0IGJvZHkgPSBKU09OLnBhcnNlKGV2ZW50LmJvZHkpO1xuXG4gIGNvbnN0IGR5bmFtbyA9IG5ldyBEeW5hbW9EQi5Eb2N1bWVudENsaWVudCgpO1xuICBjb25zdCBzZiA9IG5ldyBTdGVwRnVuY3Rpb25zKCk7XG5cbiAgaWYgKGJvZHkudHlwZSA9PT0gJ2l0ZW0nKSB7XG4gICAgY29uc3QgaXRlbSA9IGF3YWl0IGR5bmFtb1xuICAgICAgLmdldCh7XG4gICAgICAgIFRhYmxlTmFtZTogcHJvY2Vzcy5lbnYuSVRFTV9DQUNIRV9UQUJMRV9OQU1FID8/ICcnLFxuICAgICAgICBLZXk6IHsgaWQ6IGAke2JvZHkucGFyYW1zLml0ZW1JZH1gIH0sXG4gICAgICB9KVxuICAgICAgLnByb21pc2UoKTtcblxuICAgIGlmIChpdGVtLkl0ZW0pIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHN0YXR1c0NvZGU6IDIwMCxcbiAgICAgICAgaGVhZGVyczogeyAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nIH0sXG4gICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgICBjYWNoZToge1xuICAgICAgICAgICAgZGF0YTogeyBtZWRpYTogSlNPTi5wYXJzZShpdGVtLkl0ZW0ubWVkaWEpLCBpdGVtOiBKU09OLnBhcnNlKGl0ZW0uSXRlbS5jYWNoZSkgfSxcbiAgICAgICAgICAgIGVycm9yOiBudWxsLFxuICAgICAgICAgIH0sXG4gICAgICAgIH0pLFxuICAgICAgfTtcbiAgICB9XG4gIH1cblxuICBpZiAoYm9keS50eXBlID09PSAnc3BlbGwnKSB7XG4gICAgY29uc3Qgc3BlbGwgPSBhd2FpdCBkeW5hbW9cbiAgICAgIC5nZXQoe1xuICAgICAgICBUYWJsZU5hbWU6IHByb2Nlc3MuZW52LlNQRUxMX0NBQ0hFX1RBQkxFX05BTUUgPz8gJycsXG4gICAgICAgIEtleTogeyBpZDogYCR7Ym9keS5wYXJhbXMuc3BlbGxJZH1gIH0sXG4gICAgICB9KVxuICAgICAgLnByb21pc2UoKTtcblxuICAgIGlmIChzcGVsbC5JdGVtKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBzdGF0dXNDb2RlOiAyMDAsXG4gICAgICAgIGhlYWRlcnM6IHsgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyB9LFxuICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgICAgY2FjaGU6IHtcbiAgICAgICAgICAgIGRhdGE6IHsgbWVkaWE6IEpTT04ucGFyc2Uoc3BlbGwuSXRlbS5tZWRpYSksIHNwZWxsOiBKU09OLnBhcnNlKHNwZWxsLkl0ZW0uY2FjaGUpIH0sXG4gICAgICAgICAgICBlcnJvcjogbnVsbCxcbiAgICAgICAgICB9LFxuICAgICAgICB9KSxcbiAgICAgIH07XG4gICAgfVxuICB9XG5cbiAgY29uc3QgdG9rZW4gPSB1bGlkKCk7XG5cbiAgY29uc3Qgc2NhblJlc3VsdCA9IGF3YWl0IGR5bmFtb1xuICAgIC5zY2FuKHtcbiAgICAgIFRhYmxlTmFtZTogcHJvY2Vzcy5lbnYuUVVFVUVfVEFCTEVfTkFNRSA/PyAnJyxcbiAgICAgIFNlbGVjdDogJ0NPVU5UJyxcbiAgICB9KVxuICAgIC5wcm9taXNlKCk7XG5cbiAgY29uc3QgcXVldWVDb3VudCA9IHNjYW5SZXN1bHQuQ291bnQgPz8gMDtcbiAgY29uc3Qgd2FpdFRpbWUgPSBNYXRoLmZsb29yKHF1ZXVlQ291bnQgLyAxNSkgKyAxO1xuXG4gIGF3YWl0IGR5bmFtb1xuICAgIC51cGRhdGUoe1xuICAgICAgVGFibGVOYW1lOiBwcm9jZXNzLmVudi5RVUVVRV9UQUJMRV9OQU1FID8/ICcnLFxuICAgICAgS2V5OiB7IHRva2VuIH0sXG4gICAgICBVcGRhdGVFeHByZXNzaW9uOiBgc2V0IHBheWxvYWRJbiA9IDpwYXlsb2FkLCBjcmVhdGVkQXQgPSA6Y3JlYXRlZEF0YCxcbiAgICAgIEV4cHJlc3Npb25BdHRyaWJ1dGVWYWx1ZXM6IHtcbiAgICAgICAgJzpwYXlsb2FkJzogZXZlbnQuYm9keSxcbiAgICAgICAgJzpjcmVhdGVkQXQnOiBEYXRlLm5vdygpLFxuICAgICAgfSxcbiAgICB9KVxuICAgIC5wcm9taXNlKCk7XG5cbiAgYXdhaXQgc2ZcbiAgICAuc3RhcnRFeGVjdXRpb24oe1xuICAgICAgc3RhdGVNYWNoaW5lQXJuOiBwcm9jZXNzLmVudi5RVUVVRV9TVEFURV9NQUNISU5FIHx8ICcnLFxuICAgICAgaW5wdXQ6IEpTT04uc3RyaW5naWZ5KHsgdG9rZW4sIHdhaXRfdGltZTogd2FpdFRpbWUgfSksXG4gICAgfSlcbiAgICAucHJvbWlzZSgpO1xuXG4gIGNvbnN0IHJlc3BvbnNlOiBRdWV1ZUluc2VydFJlc3BvbnNlID0ge1xuICAgIHRva2VuLFxuICAgIHdhaXRUaW1lU2Vjb25kczogd2FpdFRpbWUsXG4gIH07XG5cbiAgcmV0dXJuIHtcbiAgICBzdGF0dXNDb2RlOiAyMDAsXG4gICAgaGVhZGVyczogeyAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nIH0sXG4gICAgYm9keTogSlNPTi5zdHJpbmdpZnkocmVzcG9uc2UpLFxuICB9O1xufTtcbiJdfQ==