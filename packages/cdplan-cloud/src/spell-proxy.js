"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.handler = void 0;
const aws_sdk_1 = require("aws-sdk");
const node_fetch_1 = require("node-fetch");
exports.handler = async (event) => {
    var _a, _b;
    console.log('Spell Proxy Request', event);
    const dynamo = new aws_sdk_1.DynamoDB.DocumentClient();
    const lambda = new aws_sdk_1.Lambda();
    const { region, spellId } = event;
    const tokenResponse = await lambda
        .invoke({
        FunctionName: (_a = process.env.TOKEN_FUNCTION_NAME) !== null && _a !== void 0 ? _a : '',
        Payload: JSON.stringify({ ...event }),
    })
        .promise();
    const bearer = JSON.parse(tokenResponse.Payload);
    const mediaPromise = node_fetch_1.default(`https://${region}.api.blizzard.com/data/wow/media/spell/${spellId}`, {
        headers: { authorization: `Bearer ${bearer}`, 'battlenet-namespace': `static-${region}` },
    });
    const spellPromise = node_fetch_1.default(`https://${region}.api.blizzard.com/data/wow/spell/${spellId}`, {
        headers: { authorization: `Bearer ${bearer}`, 'battlenet-namespace': `static-${region}` },
    });
    const [mediaResponse, spellResponse] = await Promise.all([mediaPromise, spellPromise]);
    if (mediaResponse.status !== 200) {
        return {
            data: null,
            error: { code: mediaResponse.status, text: await mediaResponse.text() },
        };
    }
    if (spellResponse.status !== 200) {
        return {
            data: null,
            error: { code: mediaResponse.status, text: await mediaResponse.text() },
        };
    }
    const mediaJson = await mediaResponse.json();
    const spellJson = await spellResponse.json();
    await dynamo
        .update({
        TableName: (_b = process.env.CACHE_TABLE_NAME) !== null && _b !== void 0 ? _b : '',
        Key: { id: `${spellId}` },
        UpdateExpression: `set media = :media, cache = :cache`,
        ExpressionAttributeValues: {
            ':media': JSON.stringify(mediaJson),
            ':cache': JSON.stringify(spellJson),
        },
    })
        .promise();
    return {
        data: { media: mediaJson, spell: spellJson },
        error: null,
    };
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3BlbGwtcHJveHkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJzcGVsbC1wcm94eS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSxxQ0FBMkM7QUFDM0MsMkNBQStCO0FBR2xCLFFBQUEsT0FBTyxHQUFHLEtBQUssRUFBRSxLQUFvQyxFQUFnQixFQUFFOztJQUNsRixPQUFPLENBQUMsR0FBRyxDQUFDLHFCQUFxQixFQUFFLEtBQUssQ0FBQyxDQUFDO0lBRTFDLE1BQU0sTUFBTSxHQUFHLElBQUksa0JBQVEsQ0FBQyxjQUFjLEVBQUUsQ0FBQztJQUM3QyxNQUFNLE1BQU0sR0FBRyxJQUFJLGdCQUFNLEVBQUUsQ0FBQztJQUM1QixNQUFNLEVBQUUsTUFBTSxFQUFFLE9BQU8sRUFBRSxHQUFHLEtBQUssQ0FBQztJQUVsQyxNQUFNLGFBQWEsR0FBRyxNQUFNLE1BQU07U0FDL0IsTUFBTSxDQUFDO1FBQ04sWUFBWSxRQUFFLE9BQU8sQ0FBQyxHQUFHLENBQUMsbUJBQW1CLG1DQUFJLEVBQUU7UUFDbkQsT0FBTyxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsRUFBRSxHQUFHLEtBQUssRUFBRSxDQUFDO0tBQ3RDLENBQUM7U0FDRCxPQUFPLEVBQUUsQ0FBQztJQUViLE1BQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsYUFBYSxDQUFDLE9BQWlCLENBQUMsQ0FBQztJQUUzRCxNQUFNLFlBQVksR0FBRyxvQkFBSyxDQUFDLFdBQVcsTUFBTSwwQ0FBMEMsT0FBTyxFQUFFLEVBQUU7UUFDL0YsT0FBTyxFQUFFLEVBQUUsYUFBYSxFQUFFLFVBQVUsTUFBTSxFQUFFLEVBQUUscUJBQXFCLEVBQUUsVUFBVSxNQUFNLEVBQUUsRUFBRTtLQUMxRixDQUFDLENBQUM7SUFFSCxNQUFNLFlBQVksR0FBRyxvQkFBSyxDQUFDLFdBQVcsTUFBTSxvQ0FBb0MsT0FBTyxFQUFFLEVBQUU7UUFDekYsT0FBTyxFQUFFLEVBQUUsYUFBYSxFQUFFLFVBQVUsTUFBTSxFQUFFLEVBQUUscUJBQXFCLEVBQUUsVUFBVSxNQUFNLEVBQUUsRUFBRTtLQUMxRixDQUFDLENBQUM7SUFFSCxNQUFNLENBQUMsYUFBYSxFQUFFLGFBQWEsQ0FBQyxHQUFHLE1BQU0sT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLFlBQVksRUFBRSxZQUFZLENBQUMsQ0FBQyxDQUFDO0lBRXZGLElBQUksYUFBYSxDQUFDLE1BQU0sS0FBSyxHQUFHLEVBQUU7UUFDaEMsT0FBTztZQUNMLElBQUksRUFBRSxJQUFJO1lBQ1YsS0FBSyxFQUFFLEVBQUUsSUFBSSxFQUFFLGFBQWEsQ0FBQyxNQUFNLEVBQUUsSUFBSSxFQUFFLE1BQU0sYUFBYSxDQUFDLElBQUksRUFBRSxFQUFFO1NBQ3hFLENBQUM7S0FDSDtJQUVELElBQUksYUFBYSxDQUFDLE1BQU0sS0FBSyxHQUFHLEVBQUU7UUFDaEMsT0FBTztZQUNMLElBQUksRUFBRSxJQUFJO1lBQ1YsS0FBSyxFQUFFLEVBQUUsSUFBSSxFQUFFLGFBQWEsQ0FBQyxNQUFNLEVBQUUsSUFBSSxFQUFFLE1BQU0sYUFBYSxDQUFDLElBQUksRUFBRSxFQUFFO1NBQ3hFLENBQUM7S0FDSDtJQUVELE1BQU0sU0FBUyxHQUFHLE1BQU0sYUFBYSxDQUFDLElBQUksRUFBRSxDQUFDO0lBQzdDLE1BQU0sU0FBUyxHQUFHLE1BQU0sYUFBYSxDQUFDLElBQUksRUFBRSxDQUFDO0lBRTdDLE1BQU0sTUFBTTtTQUNULE1BQU0sQ0FBQztRQUNOLFNBQVMsUUFBRSxPQUFPLENBQUMsR0FBRyxDQUFDLGdCQUFnQixtQ0FBSSxFQUFFO1FBQzdDLEdBQUcsRUFBRSxFQUFFLEVBQUUsRUFBRSxHQUFHLE9BQU8sRUFBRSxFQUFFO1FBQ3pCLGdCQUFnQixFQUFFLG9DQUFvQztRQUN0RCx5QkFBeUIsRUFBRTtZQUN6QixRQUFRLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUM7WUFDbkMsUUFBUSxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDO1NBQ3BDO0tBQ0YsQ0FBQztTQUNELE9BQU8sRUFBRSxDQUFDO0lBRWIsT0FBTztRQUNMLElBQUksRUFBRSxFQUFFLEtBQUssRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLFNBQVMsRUFBRTtRQUM1QyxLQUFLLEVBQUUsSUFBSTtLQUNaLENBQUM7QUFDSixDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEeW5hbW9EQiwgTGFtYmRhIH0gZnJvbSAnYXdzLXNkayc7XG5pbXBvcnQgZmV0Y2ggZnJvbSAnbm9kZS1mZXRjaCc7XG5pbXBvcnQgeyBRdWV1ZVBheWxvYWRJblNwZWxsIH0gZnJvbSAnLi90eXBlcyc7XG5cbmV4cG9ydCBjb25zdCBoYW5kbGVyID0gYXN5bmMgKGV2ZW50OiBRdWV1ZVBheWxvYWRJblNwZWxsWydwYXJhbXMnXSk6IFByb21pc2U8YW55PiA9PiB7XG4gIGNvbnNvbGUubG9nKCdTcGVsbCBQcm94eSBSZXF1ZXN0JywgZXZlbnQpO1xuXG4gIGNvbnN0IGR5bmFtbyA9IG5ldyBEeW5hbW9EQi5Eb2N1bWVudENsaWVudCgpO1xuICBjb25zdCBsYW1iZGEgPSBuZXcgTGFtYmRhKCk7XG4gIGNvbnN0IHsgcmVnaW9uLCBzcGVsbElkIH0gPSBldmVudDtcblxuICBjb25zdCB0b2tlblJlc3BvbnNlID0gYXdhaXQgbGFtYmRhXG4gICAgLmludm9rZSh7XG4gICAgICBGdW5jdGlvbk5hbWU6IHByb2Nlc3MuZW52LlRPS0VOX0ZVTkNUSU9OX05BTUUgPz8gJycsXG4gICAgICBQYXlsb2FkOiBKU09OLnN0cmluZ2lmeSh7IC4uLmV2ZW50IH0pLFxuICAgIH0pXG4gICAgLnByb21pc2UoKTtcblxuICBjb25zdCBiZWFyZXIgPSBKU09OLnBhcnNlKHRva2VuUmVzcG9uc2UuUGF5bG9hZCBhcyBzdHJpbmcpO1xuXG4gIGNvbnN0IG1lZGlhUHJvbWlzZSA9IGZldGNoKGBodHRwczovLyR7cmVnaW9ufS5hcGkuYmxpenphcmQuY29tL2RhdGEvd293L21lZGlhL3NwZWxsLyR7c3BlbGxJZH1gLCB7XG4gICAgaGVhZGVyczogeyBhdXRob3JpemF0aW9uOiBgQmVhcmVyICR7YmVhcmVyfWAsICdiYXR0bGVuZXQtbmFtZXNwYWNlJzogYHN0YXRpYy0ke3JlZ2lvbn1gIH0sXG4gIH0pO1xuXG4gIGNvbnN0IHNwZWxsUHJvbWlzZSA9IGZldGNoKGBodHRwczovLyR7cmVnaW9ufS5hcGkuYmxpenphcmQuY29tL2RhdGEvd293L3NwZWxsLyR7c3BlbGxJZH1gLCB7XG4gICAgaGVhZGVyczogeyBhdXRob3JpemF0aW9uOiBgQmVhcmVyICR7YmVhcmVyfWAsICdiYXR0bGVuZXQtbmFtZXNwYWNlJzogYHN0YXRpYy0ke3JlZ2lvbn1gIH0sXG4gIH0pO1xuXG4gIGNvbnN0IFttZWRpYVJlc3BvbnNlLCBzcGVsbFJlc3BvbnNlXSA9IGF3YWl0IFByb21pc2UuYWxsKFttZWRpYVByb21pc2UsIHNwZWxsUHJvbWlzZV0pO1xuXG4gIGlmIChtZWRpYVJlc3BvbnNlLnN0YXR1cyAhPT0gMjAwKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGRhdGE6IG51bGwsXG4gICAgICBlcnJvcjogeyBjb2RlOiBtZWRpYVJlc3BvbnNlLnN0YXR1cywgdGV4dDogYXdhaXQgbWVkaWFSZXNwb25zZS50ZXh0KCkgfSxcbiAgICB9O1xuICB9XG5cbiAgaWYgKHNwZWxsUmVzcG9uc2Uuc3RhdHVzICE9PSAyMDApIHtcbiAgICByZXR1cm4ge1xuICAgICAgZGF0YTogbnVsbCxcbiAgICAgIGVycm9yOiB7IGNvZGU6IG1lZGlhUmVzcG9uc2Uuc3RhdHVzLCB0ZXh0OiBhd2FpdCBtZWRpYVJlc3BvbnNlLnRleHQoKSB9LFxuICAgIH07XG4gIH1cblxuICBjb25zdCBtZWRpYUpzb24gPSBhd2FpdCBtZWRpYVJlc3BvbnNlLmpzb24oKTtcbiAgY29uc3Qgc3BlbGxKc29uID0gYXdhaXQgc3BlbGxSZXNwb25zZS5qc29uKCk7XG5cbiAgYXdhaXQgZHluYW1vXG4gICAgLnVwZGF0ZSh7XG4gICAgICBUYWJsZU5hbWU6IHByb2Nlc3MuZW52LkNBQ0hFX1RBQkxFX05BTUUgPz8gJycsXG4gICAgICBLZXk6IHsgaWQ6IGAke3NwZWxsSWR9YCB9LFxuICAgICAgVXBkYXRlRXhwcmVzc2lvbjogYHNldCBtZWRpYSA9IDptZWRpYSwgY2FjaGUgPSA6Y2FjaGVgLFxuICAgICAgRXhwcmVzc2lvbkF0dHJpYnV0ZVZhbHVlczoge1xuICAgICAgICAnOm1lZGlhJzogSlNPTi5zdHJpbmdpZnkobWVkaWFKc29uKSxcbiAgICAgICAgJzpjYWNoZSc6IEpTT04uc3RyaW5naWZ5KHNwZWxsSnNvbiksXG4gICAgICB9LFxuICAgIH0pXG4gICAgLnByb21pc2UoKTtcblxuICByZXR1cm4ge1xuICAgIGRhdGE6IHsgbWVkaWE6IG1lZGlhSnNvbiwgc3BlbGw6IHNwZWxsSnNvbiB9LFxuICAgIGVycm9yOiBudWxsLFxuICB9O1xufTtcbiJdfQ==